---

- name: Remove old kernels
  ansible.builtin.command:
    cmd: "{{ old_kernels[ansible_os_family] }}"
  register: result
  changed_when: result.rc == 0

- name: Delete package cache
  ansible.builtin.command:
    cmd: "{{ package_cache[ansible_os_family] }}"
  register: result
  changed_when: result.rc == 0

- name: Find package history files
  ansible.builtin.find:
    paths: "/var/lib/{{ package_manager[ansible_os_family] }}"
    patterns: "history*"
  register: package_history

- name: Reset package manager history
  ansible.builtin.file:
    path: "{{ item.path }}"
    state: absent
  loop: "{{ package_history.files }}"

- name: Find temporary files
  ansible.builtin.find:
    file_type: any
    paths:
      - /tmp
      - /var/tmp
    patterns: '*'
  register: tmp_files

- name: Remove temporary files
  ansible.builtin.file:
    path: "{{ item.path }}"
    state: absent
  loop: "{{ tmp_files.files }}"

- name: Remove SSH host keys
  when: cleanup_ssh_host_keys | bool
  block:
    - name: Find SSH host keys
      ansible.builtin.find:
        paths: /etc/ssh
        patterns: '*host*key*'
      register: host_keys

    - name: Remove SSH host keys
      ansible.builtin.file:
        path: "{{ item.path }}"
        state: absent
      loop: "{{ host_keys.files }}"

- name: Remove auto-install files
  loop: "{{ auto_install_files[ansible_os_family] }}"
  ansible.builtin.file:
    path: "{{ item }}"
    state: absent

- name: Truncate files
  loop: "{{ log_files[ansible_os_family] }}"
  ansible.builtin.command:
    cmd: "truncate -s 0 {{ item }}"
  register: result
  changed_when: result.rc == 0

- name: Remove log folders
  loop: "{{ log_directories[ansible_os_family] }}"
  ansible.builtin.file:
    path: "{{ item }}"
    state: absent

- name: Find log files.
  ansible.builtin.find:
    paths:
      - /var/log
      - /var/log/sssd
    patterns: '*log,*.old,*.log.gz,*.[0-9],*.gz,*-????????'
  register: log_files

- name: Remove log files
  loop: "{{ log_files.files }}"
  ansible.builtin.file:
    path: "{{ item.path }}"
    state: absent

- name: Remove random-seed
  ansible.builtin.file:
    path: /var/lib/systemd/random-seed
    state: absent

- name: Disable root SSH login via password
  when: ansible_facts['distribution_major_version'] == '9'
  ansible.builtin.file:
    path: /etc/ssh/sshd_config.d/01-permitrootlogin.conf
    state: absent

- name: Fill free space with zeroes
  ansible.builtin.shell:
    cmd: dd if=/dev/zero of=/zeroed_file bs=1M oflag=direct || rm -f /zeroed_file
  changed_when: false

- name: Detect swap partition
  ansible.builtin.command:
    cmd: grep -oP '^/dev/[\w-]+' /proc/swaps
  register: swaps
  ignore_errors: true
  changed_when: false

- name: Wipe out swap data
  when: swaps.rc == 0
  block:
    - name: Get swap partition UUID
      ansible.builtin.command:
        cmd: "blkid {{ swaps.stdout }} -s UUID -o value"
      register: swap_blkid
      changed_when: false

    - name: Unmount swap partition
      ansible.builtin.command:
        cmd: "swapoff {{ swaps.stdout }}"
      register: result
      changed_when: result.rc == 0

    - name: Fill swap partition with zeroes
      ansible.builtin.shell:
        cmd: "dd if=/dev/zero of={{ swaps.stdout }} bs=1M oflag=direct || /bin/true"
      register: result
      changed_when: result.rc == 0

    - name: Format swap partition
      ansible.builtin.command:
        cmd: "mkswap -U {{ swap_blkid.stdout }} -f {{ swaps.stdout }}"
      register: result
      changed_when: result.rc == 0

    - name: Mount swap partition
      ansible.builtin.command:
        cmd: "swapon {{ swaps.stdout }}"
      register: result
      changed_when: result.rc == 0

- name: Sync disc
  ansible.builtin.command:
    cmd: sync
  register: result
  changed_when: result.rc == 0

- name: Clear shell history
  ansible.builtin.shell: |
    history -c
    history -w
  args:
    executable: /bin/bash
  register: result
  changed_when: result.rc == 0

- name: Check if WALinuxAgent is installed
  ansible.builtin.stat:
    path: /usr/sbin/waagent
  register: cleanup_vm_waagent

- name: Deprovision WALinuxAgent
  when: cleanup_vm_waagent.stat.exists
  ansible.builtin.command:
    cmd: waagent -deprovision+user -force
  register: result
  changed_when: result.rc == 0
